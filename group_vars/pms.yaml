---
pms_ip: 10.42.1.1
pms_hostname: soulpms

# ironicbadger.figurine
figurine_name: "{{ pms_hostname }}"

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: fio
  - name: git
  - name: hddtemp
  - name: htop
  - name: iftop
  - name: intel-gpu-tools
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nfs-kernel-server
  - name: nmap
  - name: nvme-cli
  - name: openssh-server
  - name: python3
  - name: python-setuptools
  - name: screen
  - name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: xfsprogs
  - name: zfsutils-linux

# ironicbadger.snapraid
snapraid_bin_path: /usr/local/bin/snapraid
snapraid_parity_disks:
  - { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9LJ0AGVG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/parity2, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MHSD18U-part1, fs: xfs, opts: defaults, content: false }
snapraid_data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJNRD5W-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SH07NTC-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ8NPG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK2T1W-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJZ2AW-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ6LEG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk7, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK1KPW-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk8, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9HZPZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk9, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SH24AMZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk10, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGHHN6C-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk11, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGEPKNC-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk12, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ2YGG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk13, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGD2B6C-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk14, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9MDTZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk15, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJRD46U-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk16, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MH5L4GK-part1, fs: xfs, opts: defaults, content: true }
snapraid_content_files:
  - /mnt/tank/fuse/documents/.snapraid.content
snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"
  - ".nfo"
  - "Proxmox/"
  - "Backups/"

fstab_mergerfs:
  - { source: "/mnt/disk*", mountpoint: "{{ data_path }}", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=mfs,dropcacheonclose=true,minfreespace=100G,fsname=MergerFS" }  

snapraid_runner: true
snapraid_healthcheck_io_host: "https://hc.{{ secret_domain_cloud }}"
snapraid_runner_healthcheck_io_uuid: "{{ snapraid_healthchecks_id }}"

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
        - "/mnt/disk1"
        - "/mnt/disk2"
        - "/mnt/disk3"
        - "/mnt/disk4"
        - "/mnt/disk5"
        - "/mnt/disk6"
        - "/mnt/disk7"
        - "/mnt/disk8"
        - "/mnt/disk9"
        - "/mnt/disk10"
        - "/mnt/disk11"
        - "/mnt/disk12"
        - "/mnt/disk13"
        - "/mnt/disk14"
        - "/mnt/disk15"
        - "/mnt/disk16"
        - "/mnt/parity1"
        - "/mnt/parity2"
        - "/mnt/storage"
        - "/mnt/tank"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "eno1"

# ntd.nut
nut_mode: netclient
nut_host: 10.42.1.2
nut_user: SoulDeity
nut_password: "{{ secret_soulnut_pass }}"
nut_role: slave
nut_packages:
  - nut-client
nut_ups:
  - name: CyberPower
    driver: usbhid-ups
    device: auto
    description: CyberPower 1500 UPS
nut_upsmon_extra: |
  RUN_AS_USER root

  MINSUPPLIES 1
  SHUTDOWNCMD "/sbin/shutdown -h"
  NOTIFYCMD /usr/sbin/upssched
  POLLFREQ 2
  POLLFREQALERT 1
  HOSTSYNC 15
  DEADTIME 15
  POWERDOWNFLAG /etc/killpower

  NOTIFYMSG ONLINE    "UPS %s on line power"
  NOTIFYMSG ONBATT    "UPS %s on batter"
  NOTIFYMSG LOWBATT   "UPS %s battery is low"
  NOTIFYMSG FSD       "UPS #s: forced shutdown in progress"
  NOTIFYMSG COMMOK    "Communications with UPS %s established"
  NOTIFYMSG COMMBAD   "Communications with UPS %s lost"
  NOTIFYMSG SHUTDOWN  "Auto logout and shutdown proceeding"
  NOTIFYMSG REPLBATT  "UPS %s batter needs to be replaced"
  NOTIFYMSG NOCOMM    "UPS %s is unavailable"
  NOTIFYMSG NOPARENT  "upsmon parent process died - shutdown impossible"

  NOTIFYMSG ONLINE    SYSLOG+WALL+EXEC
  NOTIFYMSG ONBATT    SYSLOG+WALL+EXEC
  NOTIFYMSG LOWBATT   SYSLOG+WALL
  NOTIFYMSG FSD       SYSLOG+WALL+EXEC
  NOTIFYMSG COMMOK    SYSLOG+WALL+EXEC
  NOTIFYMSG COMMBAD   SYSLOG+WALL+EXEC
  NOTIFYMSG SHUTDOWN  SYSLOG+WALL+EXEC
  NOTIFYMSG REPLBATT  SYSLOG+WALL
  NOTIFYMSG NOCOMM    SYSLOG+WALL+EXEC
  NOTIFYMSG NOPARENT  SYSLOG+WALL

  RBWARNTIME 43200
  NOCOMMWARNTIME 600
  FINALDELAY 5
# configure /etc/nut/upssched.conf with the following
  # CMDSCRIPT /etc/nut/upssched-cmd
  # PIPEFN /etc/nut/upssched.pipe
  # LOCKFN /etc/nut/upssched.lock
  #
  # AT ONBATT * START-TIMER onbatt 30
  # AT ONLINE * CANCEL-TIMER onbatt online
  # AT ONBATT * START-TIMER earlyshutdown 30
  # AT ONLINE * CANCEL-TIMER earlyshutdown online
  # AT LOWBATT * EXECUTE onbatt
  # AT COMMBAD * START-TIMER commbad 30
  # AT COMMOK * CANCEL-TIMER commbad commok
  # AT NOCOMM * EXECUTE commbad
  # AT SHUTDOWN * EXECUTE powerdown
# configure /etc/nut/upssched-cmd with the following
  #  !/bin/sh
  #    case $1 in
  #      onbatt)
  #        logger -t upssched-cmd "The UPS is on battery"
  #        ;;
  #      earlyshutdown)
  #        logger -t upssched-cmd "UPS on battery too long, forced shutdown"
  #        /usr/sbin/upsmon -c fsd
  #       ;;
  #      shutdowncritical)
  #        logger -t upssched-cmd "UPS on battery critical, forced shutdown"
  #        /usr/sbin/upsmon -c fsd
  #       ;;
  #      upsgone)
  #        logger -t upssched-cmd "The UPS has been gone for awhile"
  #        ;;
  #      *)
  #        logger -t upssched-cmd "Unrecognized command: $1"
  #        ;;
  #    esac

# ironicbadger.ansible_role_bash_aliases
bash_aliases:
  - { alias: "ls", command: "ls --color=auto"}
  - { alias: "ll", command: "ls -la"}
  - { alias: "df", command: "df -h -x aufs -x tmpfs -x udev"}
  - { alias: "du", command: "du -ch"}
  - { alias: "c", command: "clear"}
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker-compose -f ~/docker-compose.yml up -d --remove-orphans"}
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop"}
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -t snapshot" }
  - { alias: "dfclean", command: "df -h -x tmpfs -x zfs -t fuse.mergerfs -t xfs -t ext4"}
  - { alias: "dffull", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 -t zfs"}
  - { alias: "hdtemp", command: "sudo hddtemp /dev/sd[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r]"}

# soulpms
docker_zfs_override: true
extra_mountpoints:
  - { path: "{{ data_path }}" }
  - { path: /mnt/nvme1, diskbyid: /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b490a15d3-part1, fs: xfs, opts: defaults}

# soultraefik
traefik_file_provider: true
traefik_enable_dashboard: true #defaults to false
traefik_insecure_transport: true #defaults to false
traefik_exposed_by_default: true

## soulauthelia
authelia_users:
  - username: "{{ authelia_username }}"
    displayname: "{{ authelia_displayname }}"
    # docker run authelia/authelia:latest authelia hash-password 'yourpassword'
    password: "{{ authelia_password }}"
    email: "{{ authelia_email_address }}"
    groups:
      - admin
      - dev
authelia_rules:
  - domain: "*.{{ secret_domain_full }}" # allows api's through
    policy: bypass
    resources:
      - '^/api.*$'
  - domain: "*.{{ secret_domain_full }}" # allows calendar feeds through
    policy: bypass
    resources:
      - '^/feed.*$'
  - domain: "*.{{ secret_domain_full }}"
    policy: two_factor
  - domain: "plex.{{ secret_domain_full }}"
    policy: one_factor
  - domain: "drive.{{ secret_domain_full }}"
    policy: bypass

# soulrestic
restic_healthchecks_id: "{{ restic_pms_healthchecks_id }}"
restic_forget_healthchecks_id: "{{ restic_pms_forget_healthchecks_id }}"
restic_backup_locations:
  - /mnt/tank
restic_backup_excludes: #defaults to blank
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Cache
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Media
  - /mnt/tank/appdata/plexmeta
restic_forget: true #defaults to false

# ironicbadger.docker_compose_generator
appdata_path: /mnt/tank/appdata
download_path: /mnt/storage/downloads
data_path: /mnt/storage
containers:
  ###
  - service_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
      #- 8080:8080
    extra_hosts:
      - host.docker.internal:172.17.0.1
    environment:
      - "CLOUDFLARE_EMAIL={{ secret_cloudflare_email }}"
      - "CLOUDFLARE_API_KEY={{ secret_cloudflare_api }}"
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
  ###
  - service_name: authelia
    active: true
    image: authelia/authelia
    labels:
      - "traefik.http.routers.authelia.rule=Host(`login.{{ secret_domain_full }}`)"
      - traefik.http.routers.authelia.tls=true
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.{{ secret_domain_full }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    volumes:
      - "{{ appdata_path }}/authelia:/config"
    expose:
    restart: unless-stopped
  - service_name: auth-redis
    active: true
    image: redis
    volumes:
      - "{{ appdata_path }}/redis/authelia:/data"
    restart: unless-stopped
  ###
  - service_name: scrutiny
    active: true
    image: ghcr.io/analogj/scrutiny:master-omnibus
    labels:
      - traefik.enable=false
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    devices:
      - /dev:/dev
    volumes:
      - "{{ appdata_path }}/scrutiny/config:/opt/scrutiny/config"
      - "{{ appdata_path }}/scrutiny/influxdb:/opt/scrutiny/influxdb"
      - /run/udev:/run/udev:ro
    ports:
      - "7278:8080" # webapp
      - "8087:8086" # influxDB admin
    privileged: true
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plex
    active: true
    image: lscr.io/linuxserver/plex
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ appdata_path }}/plex:/config"
      - /dev/shm:/config/transcodes
      - "{{ data_path }}:/data:ro"
    environment:
      - VERSION=docker
    labels:
      - "traefik.http.routers.plex.rule=Host(`plex.{{ secret_domain_full }}`)"
      - traefik.http.services.plex.loadbalancer.server.port=32400
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plexmeta
    active: true
    image: meisnate12/plex-meta-manager
    labels:
      - traefik.enable=false
    volumes:
      - "{{ appdata_path }}/plexmeta/config:/config"
    environment:
      - PMM_TIME=01:22
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: tautulli
    active: true
    image: lscr.io/linuxserver/tautulli
    depends_on:
      - plex
    labels:
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/tautulli:/config"
      - "{{ appdata_path }}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nzbget
    active: true
    image: lscr.io/linuxserver/nzbget
    labels:
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.{{ secret_domain_full }}`)"
      - traefik.http.routers.nzbget.middlewares=authelia@docker
      - "traefik.http.routers.nzbgetapi.rule=Host(`nzbgetapi.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/nzbget:/config"
      - "{{ download_path }}:/downloads"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: prowlarr
    active: true
    image: lscr.io/linuxserver/prowlarr:develop
    labels:
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ secret_domain_full }}`)"
      - traefik.http.routers.prowlarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/prowlarr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: flaresolverr
    active: true
    image: ghcr.io/flaresolverr/flaresolverr:latest
    ports:
     - "8191:8191"
    restart: unless-stopped  
  ###
  - service_name: sonarr
    active: true
    image: lscr.io/linuxserver/sonarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ secret_domain_full }}`)"
      - traefik.http.routers.sonarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: radarr
    active: true
    image: lscr.io/linuxserver/radarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ secret_domain_full }}`)"
      - traefik.http.routers.radarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: audiobookshelf
    active: true
    image: ghcr.io/advplyr/audiobookshelf
    labels:
      - "traefik.http.routers.audiobookshelf.rule=Host(`abs.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/audiobookshelf/metadata:/metadata"
      - "{{ appdata_path }}/audiobookshelf/config:/config"
      - "{{ data_path }}:/data:ro"
    restart: unless-stopped
  ###
  - service_name: overseerr
    active: true
    image: lscr.io/linuxserver/overseerr
    labels:
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/overseerr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: organizr
    active: true
    image: ghcr.io/organizr/organizr
    labels:
      - "traefik.http.routers.main.rule=Host(`main.{{ secret_domain_full }}`)"
      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=128000
    volumes:
      - "{{ appdata_path }}/organizr:/config"
    environment:
      - fpm=true
      - branch=v2-master
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: bitwarden
    active: true
    image: vaultwarden/server
    labels:
      - "traefik.http.routers.bitwarden.rule=Host(`vault.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/bitwarden:/data"
    environment:
      - SIGNUPS_ALLOWED=false
      - WEBSOCKET_ENABLED=true
      - "DOMAIN=https://vault.{{ secret_domain_full }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nextcloud
    active: true
    image: lscr.io/linuxserver/nextcloud
    depends_on:
      - nextcloud-db
      - nc-redis
      - nc-imaginary
    labels:
      - "traefik.http.routers.nextcloud.rule=Host(`drive.{{ secret_domain_full }}`)"
      - traefik.http.routers.nextcloud.tls.certresolver=cloudflare
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.port=443
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.scheme=https
      - traefik.http.middlewares.nextcloud-hsts.headers.stsseconds=15552000
      - traefik.http.routers.nextcloud.middlewares=nextcloud-hsts@docker
    volumes:
      - "{{ appdata_path }}/nextcloud:/config"
      - "{{ appdata_path }}/nextcloud/data:/data"
    environment:
      - DOCKER_MODS=theorangeone/lsio-mod-more-processes:latest
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nextcloud-db
    active: true
    image: lscr.io/linuxserver/mariadb
    ports:
      - "3306:3306"
    volumes:
      - "{{ appdata_path }}/nextcloud-db:/config"
    environment:
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=souldeity
      - "MYSQL_PASSWORD={{ secret_nextclouddb_pass }}"
      - "MYSQL_ROOT_PASSWORD={{ secret_nextclouddb_pass }}"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nc-redis
    active: true
    image: redis:alpine
    volumes:
      - "{{ appdata_path }}/redis/nextcloud:/data"
    restart: unless-stopped
  - service_name: nc-imaginary
    active: true
    image: nextcloud/aio-imaginary
    restart: unless-stopped
  ###
  - service_name: paperless
    active: true
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    depends_on:
      - pl-redis
    labels:
      - "traefik.http.routers.paperless.rule=Host(`paperless.{{ secret_domain_full }}`)"
      - traefik.http.routers.paperless.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/paperless/config:/usr/src/paperless/data"
      - "{{ appdata_path }}/paperless/data/media:/usr/src/paperless/media"
      - "{{ appdata_path }}/paperless/data/consume:/usr/src/paperless/consume"
      - "{{ appdata_path }}/paperless/data/export:/usr/src/paperless/export"
    environment:
      - "PAPERLESS_SECRET_KEY={{ secret_paperless_key }}"
      - "PAPERLESS_URL=https://paperless.{{ secret_domain_full }}"
      - "PAPERLESS_TIME_ZONE={{ ntp_timezone }}"
      - PAPERLESS_FILENAME_FORMAT="{created_year}/{correspondent}/{created} {title}"
      - PAPERLESS_CONSUMER_RECURSIVE=true
      - PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS=true
      - PAPERLESS_REDIS=redis://pl-redis:6379
    include_global_env_vars: false
    restart: unless-stopped
  - service_name: pl-redis
    active: true
    image: redis:6.0
    volumes:
      - "{{ appdata_path }}/redis/paperless:/data"
    restart: unless-stopped
  ###
  - service_name: mealie
    active: true
    image: hkotel/mealie
    volumes:
      - "{{ appdata_path }}/mealie:/app/data"
    labels:
      - "traefik.http.routers.mealie.rule=Host(`mealie.{{ secret_domain_full }}`)"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: actual
    active: true
    image: jlongster/actual-server
    labels:
      - traefik.enable=false
    ports:
      - "5006:5006"
    volumes:
      - "{{ appdata_path }}/actual/server-files:/app/server-files"
      - "{{ appdata_path }}/actual/user-files:/app/user-files"
    include_global_env_vars: false
    restart: unless-stopped
  ###
  - service_name: smokeping
    active: true
    image: lscr.io/linuxserver/smokeping
    labels:
      - traefik.enable=false
    ports:
      - "81:80"
    volumes:
      - "{{ appdata_path }}/smokeping/config:/config"
      - "{{ appdata_path }}/smokeping/data:/data"
    include_global_env_vars: true 
    restart: unless-stopped
  ###
  - service_name: freshrss
    active: true
    image: lscr.io/linuxserver/freshrss:latest
    labels:
      - "traefik.http.routers.freshrss.rule=Host(`rss.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/freshrss:/config"
    include_global_env_vars: true #optional - defaults to false
    restart: unless-stopped
  ###
  - service_name: wallabag
    active: true
    image: wallabag/wallabag
    labels:
      - "traefik.http.routers.wallabag.rule=Host(`wallabag.{{ secret_domain_full }}`)"
    environment:
      - "SYMFONY__ENV__DOMAIN_NAME=https://wallabag.{{ secret_domain_full }}"
      - "SYMFONY__ENV__DATABASE_DRIVER=pdo_sqlite"
      - "SYMFONY__ENV__FOSUSER_CONFIRMATION=false"
    volumes:
      - "{{ appdata_path }}/wallabag:/var/www/wallabag/data"
    include_global_env_vars: false #optional - defaults to false
    restart: unless-stopped

# template for docker-compose services
  # - service_name:
  #   active: true
  #   image:
  #   container_name: #optional - only required if diff to service_name
  #   depends_on:
  #     -
  #   labels:
  #     - traefik.enable=true
  #     - "traefik.http.routers.XXXX.rule=Host(`XXXX.{{ secret_domain_full }}`)"
  #     #- traefik.http.routers.XXXX.entrypoints=websecure
  #     #- traefik.http.routers.XXXX.tls.certresolver=cloudflare
  #     - traefik.http.services.XXXX.loadbalancer.server.port=80
  #     #- traefik.http.routers.XXXX.middlewares=authelia@docker
  #   volumes:
  #     - "{{ appdata_path }}/app:/config"
  #   environment:
  #     -
  #   include_global_env_vars: #optional - defaults to false
  #   restart: unless-stopped
  ###