---
pms_ip: 192.168.1.253
pms_hostname: soulpms

# soulfigurine
figurine_name: "{{ pms_hostname }}"

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: fio
  - name: git
  - name: hddtemp
  - name: htop
  - name: iftop
  - name: intel-gpu-tools
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nfs-kernel-server
  - name: nmap
  - name: nvme-cli
  - name: openssh-server
  - name: python3
  - name: python-setuptools
  - name: screen
  - name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: xfsprogs
  - name: zfsutils-linux

# ironicbadger.snapraid
snapraid_bin_path: /usr/bin/snapraid
snapraid_parity_disks:
  - { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9LJ0AGVG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/parity2, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MHSD18U-part1, fs: xfs, opts: defaults, content: false }
snapraid_data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJNRD5W-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SH07NTC-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ8NPG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK2T1W-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJZ2AW-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ6LEG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk7, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK1KPW-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk8, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9HZPZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk9, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SH24AMZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk10, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGHHN6C-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk11, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGEPKNC-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk12, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ2YGG-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk13, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGD2B6C-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk14, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9MDTZ-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk15, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJRD46U-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk16, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MH5L4GK-part1, fs: xfs, opts: defaults, content: true }
snapraid_content_files:
  - path: /mnt/tank/fuse/documents/.snapraid.content
snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"
  - "Proxmox/"
  - "Backups/"

fstab_mergerfs:
  - { source: "/mnt/disk*", mountpoint: "{{ data_path }}", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=mfs,dropcacheonclose=true,minfreespace=250G,fsname=MergerFS" }  

snapraid_runner: true
snapraid_email_address: "{{ secret_snapraid_email_address }}"
snapraid_gmail_pass: "{{ secret_snapraid_gmail_pass }}"
snapraid_healthcheck_io_uuid: "{{ secret_hc_snapraid_uuid }}"

## telegraf
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
        - "/mnt/disk1"
        - "/mnt/disk2"
        - "/mnt/disk3"
        - "/mnt/disk4"
        - "/mnt/disk5"
        - "/mnt/disk6"
        - "/mnt/disk7"
        - "/mnt/disk8"
        - "/mnt/disk9"
        - "/mnt/disk10"
        - "/mnt/disk11"
        - "/mnt/disk12"
        - "/mnt/disk13"
        - "/mnt/disk14"
        - "/mnt/disk15"
        - "/mnt/disk16"
        - "/mnt/parity1"
        - "/mnt/parity2"
        - "/mnt/storage"
        - "/mnt/tank"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "eno1"

# ironicbadger.ansible_role_bash_aliases
bash_aliases:
  - { alias: "ls", command: "ls --color=auto"}
  - { alias: "ll", command: "ls -la"}
  - { alias: "df", command: "df -h -x aufs -x tmpfs -x udev"}
  - { alias: "du", command: "du -ch"}
  - { alias: "c", command: "clear"}
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker-compose -f ~/docker-compose.yml up -d --remove-orphans"}
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop"}
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -t snapshot" }
  - { alias: "dfclean", command: "df -h -x tmpfs -x zfs -t fuse.mergerfs -t xfs -t ext4"}
  - { alias: "dffull", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 -t zfs"}
  - { alias: "hdtemp", command: "sudo hddtemp /dev/sd[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r]"}

# soulpms
docker_zfs_override: true
extra_mountpoints:
  - { path: "{{ data_path }}" }

# soultraefik
traefik_file_provider: true
traefik_enable_dashboard: false #defaults to false
traefik_insecure_transport: true #defaults to false

# soulrestic
restic_backup_locations:
  - /mnt/tank
restic_backup_excludes: #defaults to blank
  - /mnt/tank/appdata/duplicati
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Cache
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Media
restic_forget: false #defaults to false

# ironicbadger.docker_compose_generator
appdata_path: /mnt/tank/appdata
download_path: /mnt/storage/downloads
data_path: /mnt/storage
containers:
###
  - service_name: traefik
    image: traefik
    container_name: tr
    hostname: tr
    active: true
    extra_hosts:
      - host.docker.internal:172.17.0.1
    volumes:
      - "{{ appdata_path }}/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - "CLOUDFLARE_EMAIL={{ secret_cloudflare_email }}"
      - "CLOUDFLARE_API_KEY={{ secret_cloudflare_api }}"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    restart: unless-stopped
  ###
  - service_name: scrutiny
    image: ghcr.io/linuxserver/scrutiny
    container_name: scrutiny
    hostname: scrutiny
    active: true
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    devices:
      - /dev:/dev
    volumes:
      - "{{ appdata_path }}/scrutiny:/config"
      - /run/udev:/run/udev:ro
    environment:
      - SCRUTINY_COLLECTOR=true
      - SCRUTINY_WEB=true
    ports:
      - "7278:8080"
    include_global_env_vars: true
    privileged: true
    restart: unless-stopped
  ###
  - service_name: plex
    image: ghcr.io/linuxserver/plex
    container_name: plex
    hostname: plex
    active: true
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ appdata_path }}/plex:/config"
      - /opt/appdata/plex/transcode:/transcode
      - "{{ data_path }}:/data"
    environment:
      - VERSION=docker
    labels:
      - traefik.enable=true
      - "traefik.http.routers.plex.rule=Host(`plex.{{ secret_domain_full }}`)"
      - traefik.http.services.plex.loadbalancer.server.port=32400
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plexmeta
    image: meisnate12/plex-meta-manager
    container_name: plexmeta
    hostname: plexmeta
    active: true
    volumes:
      - "{{ appdata_path }}/plexmeta/config:/config"
    environment:
      - PMM_TIME=01:22
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: tautulli
    image: ghcr.io/linuxserver/tautulli
    container_name: tautulli
    hostname: tautulli
    active: true
    depends_on:
      - plex
    volumes:
      - "{{ appdata_path }}/tautulli:/config"
      - "{{ appdata_path }}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.{{ secret_domain_full }}`)"
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nzbget 
    image: ghcr.io/linuxserver/nzbget
    container_name: nzbget
    hostname: nzbget
    active: true
    volumes:
      - "{{ appdata_path }}/nzbget:/config"
      - "{{ download_path }}:/downloads"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.{{ secret_domain_full }}`)"
      - traefik.http.services.nzbget.loadbalancer.server.port=6789
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr
    active: true
    volumes:
      - "{{ appdata_path }}/prowlarr:/config"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prowlarr.rule=Host(`prow.{{ secret_domain_full }}`)"
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: sonarr
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    hostname: sonarr
    active: true
    depends_on:
      - nzbget
      - prowlarr
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ secret_domain_full }}`)"
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: radarr
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    hostname: radarr
    active: true
    depends_on:
      - nzbget
      - prowlarr
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ secret_domain_full }}`)"
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: bazarr
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    hostname: bazarr
    active: false
    volumes:
      - "{{ appdata_path }}/bazarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.{{ secret_domain_full }}`)"
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: lidarr
    image: ghcr.io/linuxserver/lidarr:develop
    container_name: lidarr
    hostname: lidarr
    active: false
    depends_on:
      - nzbget
      - prowlarr
    volumes:
      - "{{ appdata_path }}/lidarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.{{ secret_domain_full }}`)"
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: readarr
    image: lscr.io/linuxserver/readarr:nightly
    container_name: readarr
    hostname: readarr
    active: true
    depends_on:
      - nzbget
      - prowlarr
    volumes:
      - "{{ appdata_path }}/readarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.readarr.rule=Host(`readarr.{{ secret_domain_full }}`)"
      - traefik.http.services.readarr.loadbalancer.server.port=8787
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: overseerr
    image: ghcr.io/linuxserver/overseerr
    container_name: overseerr
    hostname: overseerr
    active: true
    volumes:
      - "{{ appdata_path }}/overseerr:/config"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.{{ secret_domain_full }}`)"
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: organizr
    image: ghcr.io/organizr/organizr
    container_name: organizr
    hostname: organizr
    active: true
    volumes:
      - "{{ appdata_path }}/organizr:/config"
    environment:
      - fpm=true
      - branch=v2-master
    labels:
      - traefik.enable=true
      - "traefik.http.routers.main.rule=Host(`main.{{ secret_domain_full }}`)"
      - traefik.http.services.main.loadbalancer.server.port=80
      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=128000
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: grafana
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    active: true
    depends_on:
      - influxdb
      - varken
    volumes:
      - "{{ appdata_path }}/grafana:/var/lib/grafana"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.graf.rule=Host(`graf.{{ secret_domain_full }}`)"
      - traefik.http.services.graf.loadbalancer.server.port=3000
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: influxdb
    image: influxdb:1.8
    container_name: influxdb
    hostname: influxdb
    active: true
    volumes:
      - "{{ appdata_path }}/influxdb:/var/lib/influxdb"
    ports:
      - "8086:8086"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: varken
    image: boerderij/varken
    container_name: varken
    hostname: varken
    active: true
    depends_on:
      - influxdb
    volumes:
      - "{{ appdata_path }}/varken:/config"
    environment:
      # Global
      - VRKN_GLOBAL_SONARR_SERVER_IDS=1
      - VRKN_GLOBAL_RADARR_SERVER_IDS=1
      - VRKN_GLOBAL_LIDARR_SERVER_IDS=1
      - VRKN_GLOBAL_TAUTULLI_SERVER_IDS=1
      - VRKN_GLOBAL_OMBI_SERVER_IDS=false
      - VRKN_GLOBAL_UNIFI_SERVER_IDS=false
      - "VRKN_GLOBAL_MAXMIND_LICENSE_KEY={{ secret_maxmind_license }}"
      # Influxdb
      - VRKN_INFLUXDB_URL=influxdb
      - VRKN_INFLUXDB_PORT=8086
      - VRKN_INFLUXDB_SSL=false
      - VRKN_INFLUXDB_VERIFY_SSL=false
      - VRKN_INFLUXDB_USERNAME=root
      - VRKN_INFLUXDB_PASSWORD=root
      # Tautulli
      - VRKN_TAUTULLI_1_URL=tautulli:8181
      - "VRKN_TAUTULLI_1_APIKEY={{ secret_tautulli_api }}"
      - VRKN_TAUTULLI_1_SSL=false
      - VRKN_TAUTULLI_1_VERIFY_SSL=false
      - VRKN_TAUTULLI_1_GET_ACTIVITY=true
      - VRKN_TAUTULLI_1_GET_ACTIVITY_RUN_SECONDS=30
      - VRKN_TAUTULLI_1_GET_STATS=true
      - VRKN_TAUTULLI_1_GET_STATS_RUN_SECONDS=3600
      # Sonarr
      - VRKN_SONARR_1_URL=sonarr:8989
      - "VRKN_SONARR_1_APIKEY={{ secret_sonarr_api }}"
      - VRKN_SONARR_1_SSL=false
      - VRKN_SONARR_1_VERIFY_SSL=false
      - VRKN_SONARR_1_MISSING_DAYS=7
      - VRKN_SONARR_1_MISSING_DAYS_RUN_SECONDS=300
      - VRKN_SONARR_1_FUTURE_DAYS=1
      - VRKN_SONARR_1_FUTURE_DAYS_RUN_SECONDS=300
      - VRKN_SONARR_1_QUEUE=true
      - VRKN_SONARR_1_QUEUE_RUN_SECONDS=300
      # Radarr
      - VRKN_RADARR_1_URL=radarr:7878
      - "VRKN_RADARR_1_APIKEY={{ secret_radarr_api }}"
      - VRKN_RADARR_1_SSL=false
      - VRKN_RADARR_1_VERIFY_SSL=false
      - VRKN_RADARR_1_QUEUE=true
      - VRKN_RADARR_1_QUEUE_RUN_SECONDS=300
      - VRKN_RADARR_1_GET_MISSING=true
      - VRKN_RADARR_1_GET_MISSING_RUN_SECONDS=300
      # Lidarr
      - VRKN_LIDARR_1_URL=lidarr:8686
      - "VRKN_LIDARR_1_APIKEY={{ secret_lidarr_api }}"
      - VRKN_LIDARR_1_SSL=false
      - VRKN_LIDARR_1_VERIFY_SSL=false
      - VRKN_LIDARR_1_MISSING_DAYS=30
      - VRKN_LIDARR_1_MISSING_DAYS_RUN_SECONDS=300
      - VRKN_LIDARR_1_FUTURE_DAYS=30
      - VRKN_LIDARR_1_FUTURE_DAYS_RUN_SECONDS=300
      - VRKN_LIDARR_1_QUEUE=true
      - VRKN_LIDARR_1_QUEUE_RUN_SECONDS=300
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: unifi-controller
    image: ghcr.io/linuxserver/unifi-controller
    container_name: unifi-controller
    hostname: unifi-controller
    active: true
    volumes:
      - "{{ appdata_path }}/unifi-controller:/config"
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514 #optional
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: bitwarden
    image: vaultwarden/server
    container_name: bitwarden
    hostname: bitwarden
    active: true
    volumes:
      - "{{ appdata_path }}/bitwarden:/data"
    environment:
      - SIGNUPS_ALLOWED=false
      - WEBSOCKET_ENABLED=true
      - "DOMAIN=https://vault.{{ secret_domain_full }}"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.bitwarden.rule=Host(`vault.{{ secret_domain_full }}`)"
      - traefik.http.services.bitwarden.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nextcloud
    image: ghcr.io/linuxserver/nextcloud:php8
    container_name: nextcloud
    hostname: nextcloud
    active: true
    depends_on:
      - nextcloud-db
      - nc-redis
    volumes:
      - "{{ appdata_path }}/nextcloud:/config"
      - "{{ appdata_path }}/nextcloud/data:/data"
    environment:
      - DOCKER_MODS=theorangeone/lsio-mod-more-processes:latest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nextcloud.rule=Host(`drive.{{ secret_domain_full }}`)"
      - traefik.http.routers.nextcloud.tls.certresolver=cloudflare
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.port=443
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.scheme=https
      - traefik.http.middlewares.nextcloud-hsts.headers.stsseconds=15552000
      - traefik.http.routers.nextcloud.middlewares=nextcloud-hsts@docker
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nextcloud-db
    image: ghcr.io/linuxserver/mariadb
    container_name: nextcloud-db
    hostname: nextcloud-db
    active: true
    volumes:
      - "{{ appdata_path }}/nextcloud-db:/config"
    environment:
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=souldeity
      - "MYSQL_PASSWORD={{ secret_nextclouddb_pass }}"
      - "MYSQL_ROOT_PASSWORD={{ secret_nextclouddb_pass }}"
    ports:
      - "3306:3306"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nc-redis
    image: redis:alpine
    container_name: nc-redis
    hostname: nc-redis
    active: true
    volumes:
      - "{{ appdata_path }}/redis/nextcloud:/data"
    restart: unless-stopped
  ###
  - service_name: nick-blog
    image: ghost
    container_name: nick-blog
    hostname: nick-blog
    active: true
    volumes:
      - "{{ appdata_path }}/nick-blog:/var/lib/ghost/content"
    environment:
      - NODE_ENV=production
      - "url=https://blog.{{ secret_domain_full }}"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.nickblog.rule=Host(`blog.{{ secret_domain_full }}`)"
      - traefik.http.services.nickblog.loadbalancer.server.port=2368
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: duplicati
    image: ghcr.io/linuxserver/duplicati
    container_name: duplicati
    hostname: duplicati
    active: false
    volumes:
      - "{{ appdata_path }}/duplicati:/config"
      - "{{ data_path }}/Backups:/backups"
      - "{{ data_path }}:/source/storage"
      - /mnt/tank:/source/tank
    labels:
      - traefik.enable=true
      - "traefik.http.routers.duplicati.rule=Host(`bdr.{{ secret_domain_full }}`)"
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: mealie
    image: hkotel/mealie
    container_name: mealie
    hostname: mealie
    active: true
    volumes:
      - "{{ appdata_path }}/mealie:/app/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.mealie.rule=Host(`mealie.{{ secret_domain_full }}`)"
      - traefik.http.services.mealie.loadbalancer.server.port=80
    include_global_env_vars: true
    restart: unless-stopped
  ###

# template for docker-compose services
#  - service_name:
#    image:
#    container_name:
#    hostname:
#    active: true
#    volumes:
#      - "{{ appdata_path }}/app:/config"
#    environment:
#      -
#    labels:
#      - traefik.enable=true
#      - "traefik.http.routers.XXXX.rule=Host(`XXXX.{{ secret_domain_full }}`)"
#      - traefik.http.services.XXXX.loadbalancer.server.port=XXXX
#    include_global_env_vars: true
#    restart: unless-stopped
  ###