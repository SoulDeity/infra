---
pms_ip: 10.42.1.1
pms_hostname: soulpms

# ironicbadger.figurine
figurine_name: "{{ pms_hostname }}"

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: fio
  - name: git
  - name: hddtemp
  - name: htop
  - name: iftop
  - name: intel-gpu-tools
  - name: iotop
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nfs-kernel-server
  - name: nmap
  - name: nvme-cli
  - name: openssh-server
  - name: python3
  - name: python-setuptools
  - name: screen
  - name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  - name: xfsprogs
  - name: zfsutils-linux

# soulpms
docker_zfs_override: true
data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MH5L4GK-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9LJ0AGVG-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9MHSD18U-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ6LEG-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK1KPW-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9HZPZ-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk7, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SH24AMZ-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk8, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGHHN6C-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk9, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGEPKNC-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk10, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ2YGG-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk11, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SGD2B6C-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk12, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_1SJ9MDTZ-part1, fs: xfs, opts: defaults }
  - { path: /mnt/disk13, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJRD46U-part1, fs: xfs, opts: defaults }

# retired disks
  # - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SJNRD5W-part1, fs: xfs, opts: defaults } Cold Spare
  # - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD80EMAZ-00WJTA0_7SH07NTC-part1, fs: xfs, opts: defaults } Cold Spare
  # - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJ8NPG-part1, fs: xfs, opts: defaults } Moved to Blue Iris
  # - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHK2T1W-part1, fs: xfs, opts: defaults } Cold Spare
  # - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD80EFAX-68LHPN0_7SHJZ2AW-part1, fs: xfs, opts: defaults } Cold Spare

extra_mountpoints:
  - { path: "{{ data_path }}" }
  - { path: /mnt/nvme1, diskbyid: /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b490a15d3-part1, fs: xfs, opts: defaults}

# zfs_disks:
# ata-HITACHI_HUA723020ALA640_YFJNG6RA
# ata-HITACHI_HUA723020ALA640_YGJLAWPA

fstab_mergerfs:
  - { source: "/mnt/disk*", mountpoint: "{{ data_path }}", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=mfs,dropcacheonclose=true,minfreespace=100G,fsname=MergerFS" }  

# ironicbadger.ansible_role_bash_aliases
bash_aliases:
  - { alias: "ls", command: "ls --color=auto"}
  - { alias: "ll", command: "ls -la"}
  - { alias: "du", command: "du -ch"}
  - { alias: "c", command: "clear"}
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker compose -f ~/docker-compose.yml up -d --remove-orphans"}
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop"}
  - { alias: "appdata", command: "cd /mnt/tank/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -o space | sort -k4 --human-numeric-sort" }
  - { alias: "dfclean", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 | sort -k 6" }
  - { alias: "dffull", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 -t zfs" }
  - { alias: "hdtemp", command: "sudo hddtemp /dev/sd[a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r]"}
  - { alias: "nvmetemp", command: "nvme smart-log /dev/nvme0n1 | grep temperature" }
  - { alias: "itop", command: "sudo intel_gpu_top" }

# soultraefik
traefik_file_provider: true
traefik_enable_dashboard: true #defaults to false
traefik_insecure_transport: true #defaults to false
traefik_exposed_by_default: true


# soulrestic
restic_healthchecks_id: "{{ restic_pms_healthchecks_id }}"
restic_forget_healthchecks_id: "{{ restic_pms_forget_healthchecks_id }}"
restic_backup_locations:
  - /mnt/tank
restic_backup_excludes: #defaults to blank
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Cache
  - /mnt/tank/appdata/plex/Library/Application Support/Plex Media Server/Media
  - /mnt/tank/appdata/plexmeta

# ironicbadger.docker_compose_generator
appdata_path: /mnt/tank/appdata
download_path: /mnt/storage/downloads
data_path: /mnt/storage
local_domain: "tl.{{ secret_domain_full }}"
containers:
  ### Administrative
  ###
  - service_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
    extra_hosts:
      - host.docker.internal:172.17.0.1
    environment:
      - "CF_API_KEY={{ secret_cloudflare_api }}"
      - "CF_API_EMAIL={{ secret_cloudflare_email }}"
      - "TRAEFIK_DASHBOARD_CREDENTIALS={{ secret_traefik_dashboard_credentials }}"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ appdata_path }}/traefik/traefik.yml:/traefik.yml:ro"
      - "{{ appdata_path }}/traefik/acme.json:/acme.json"
      - "{{ appdata_path }}/traefik/rules.yml:/rules.yml:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.p.{{ local_domain }}`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users={{ secret_traefik_dashboard_credentials }}"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.p.{{ local_domain }}`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main={{ secret_domain_full }}"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.{{ secret_domain_full }}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
    restart: unless-stopped
  ###
  - service_name: organizr
    active: true
    image: ghcr.io/organizr/organizr
    labels:
      - "traefik.http.routers.main.rule=Host(`main.{{ secret_domain_full }}`)"
      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=128000
    volumes:
      - "{{ appdata_path }}/organizr:/config"
    environment:
      - fpm=true
      - branch=v2-master
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: homepage
    active: true
    image: ghcr.io/gethomepage/homepage:latest
    labels:
      - "traefik.http.routers.homepage.rule=Host(`dash.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/homepage:/app/config"
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ data_path }}:/data:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ### Media Servers
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.http.routers.jellyfin.rule=Host(`jf.p.{{ local_domain }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    ports:
      - 2285:8096
    volumes:
      - "{{ appdata_path }}/jellyfin:/config"
      - /dev/shm:/config/transcodes
      - "{{ data_path }}:/data:ro"
    environment:
      - "JELLYFIN_PublishedServerUrl=jf.p.{{ local_domain }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plex
    active: true
    image: lscr.io/linuxserver/plex
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ appdata_path }}/plex:/config"
      - /dev/shm:/config/transcodes
      - "{{ data_path }}:/data:ro"
    environment:
      - VERSION=latest
    labels:
      - "traefik.http.routers.plex.rule=Host(`plex.{{ secret_domain_full }}`)"
      - "traefik.http.routers.plex.tls=true"
      - traefik.http.services.plex.loadbalancer.server.port=32400
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: audiobookshelf
    active: true
    image: ghcr.io/advplyr/audiobookshelf
    labels:
      - "traefik.http.routers.audiobookshelf.rule=Host(`abs.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/audiobookshelf/metadata:/metadata"
      - "{{ appdata_path }}/audiobookshelf/config:/config"
      - "{{ data_path }}:/data:ro"
    restart: unless-stopped
  ### Media Tools
  ###
  - service_name: plexmeta
    active: true
    image: kometateam/kometa:nightly
    labels:
      - traefik.enable=false
    volumes:
      - "{{ appdata_path }}/plexmeta/config:/config"
    environment:
      - KOMETA_TIMES=01:22
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: tautulli
    active: true
    image: lscr.io/linuxserver/tautulli
    depends_on:
      - plex
    labels:
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/tautulli:/config"
      - "{{ appdata_path }}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: overseerr
    active: true
    image: lscr.io/linuxserver/overseerr
    labels:
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/overseerr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  ### Media Acquisition
  ###
  - service_name: nzbget
    active: true
    image: lscr.io/linuxserver/nzbget
    labels:
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/nzbget:/config"
      - "{{ download_path }}:/downloads"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: prowlarr
    active: true
    image: lscr.io/linuxserver/prowlarr:develop
    labels:
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/prowlarr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: flaresolverr
    active: true
    image: ghcr.io/flaresolverr/flaresolverr:latest
    labels:
      - traefik.enable=false
    ports:
     - "8191:8191"
    restart: unless-stopped  
  ###
  - service_name: sonarr
    active: true
    image: lscr.io/linuxserver/sonarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/sonarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: radarr
    active: true
    image: lscr.io/linuxserver/radarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.radarr.rule=Host(`radarr.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/radarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: readarr
    active: true
    image: lscr.io/linuxserver/readarr:develop
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.readarr.rule=Host(`readarr.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/readarr:/config"
      - "{{ download_path }}:/downloads"
      - "{{ data_path }}:/data"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: pinchflat # Youtube DL
    active: true
    image: ghcr.io/kieraneglin/pinchflat:latest
    labels:
      - "traefik.http.routers.pinchflat.rule=Host(`yt.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/pinchflat:/config"
      - "{{ data_path }}/YouTube:/downloads"
    include_global_env_vars: true
    restart: unless-stopped
  ### Data Services
  ###
  - service_name: bitwarden
    active: true
    image: vaultwarden/server
    labels:
      - "traefik.http.routers.bitwarden.rule=Host(`vault.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/bitwarden:/data"
    environment:
      - SIGNUPS_ALLOWED=false
      - WEBSOCKET_ENABLED=true
      - "DOMAIN=https://vault.{{ secret_domain_full }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nextcloud
    active: true
    image: lscr.io/linuxserver/nextcloud
    depends_on:
      - nextcloud-db
      - nc-redis
      - nc-imaginary
    labels:
      - "traefik.http.routers.nextcloud.rule=Host(`drive.{{ secret_domain_full }}`)"
      - traefik.http.routers.nextcloud.tls.certresolver=cloudflare
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.port=443
      - traefik.http.services.nextcloud-nextcloud.loadbalancer.server.scheme=https
      - traefik.http.middlewares.nextcloud-hsts.headers.stsseconds=15552000
      - traefik.http.routers.nextcloud.middlewares=nextcloud-hsts@docker
    volumes:
      - "{{ appdata_path }}/nextcloud:/config"
      - "{{ appdata_path }}/nextcloud/data:/data"
    environment:
      - DOCKER_MODS=theorangeone/lsio-mod-more-processes:latest|linuxserver/mods:nextcloud-memories
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nextcloud-db
    active: true
    image: lscr.io/linuxserver/mariadb
    labels:
      - traefik.enable=false
    ports:
      - "3306:3306"
    volumes:
      - "{{ appdata_path }}/nextcloud-db:/config"
    environment:
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=souldeity
      - "MYSQL_PASSWORD={{ secret_nextclouddb_pass }}"
      - "MYSQL_ROOT_PASSWORD={{ secret_nextclouddb_pass }}"
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: nc-redis
    active: true
    image: redis:alpine
    labels:
      - traefik.enable=false
    volumes:
      - "{{ appdata_path }}/redis/nextcloud:/data"
    restart: unless-stopped
  - service_name: nc-imaginary
    active: true
    image: nextcloud/aio-imaginary
    labels:
      - traefik.enable=false
    restart: unless-stopped
  ###
  - service_name: paperless
    active: true
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    depends_on:
      - pl-redis
    labels:
      - "traefik.http.routers.paperless.rule=Host(`paperless.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/paperless/config:/usr/src/paperless/data"
      - "{{ appdata_path }}/paperless/data/media:/usr/src/paperless/media"
      - "{{ appdata_path }}/paperless/data/consume:/usr/src/paperless/consume"
      - "{{ appdata_path }}/paperless/data/export:/usr/src/paperless/export"
    environment:
      - "PAPERLESS_SECRET_KEY={{ secret_paperless_key }}"
      - "PAPERLESS_URL=https://paperless.p.{{ local_domain }}"
      - "PAPERLESS_TIME_ZONE={{ ntp_timezone }}"
      - PAPERLESS_FILENAME_FORMAT="{created_year}/{correspondent}/{created} {title}"
      - PAPERLESS_CONSUMER_RECURSIVE=true
      - PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS=true
      - PAPERLESS_REDIS=redis://pl-redis:6379
    include_global_env_vars: false
    restart: unless-stopped
  - service_name: pl-redis
    active: true
    image: redis:6.0
    labels:
      - traefik.enable=false
    volumes:
      - "{{ appdata_path }}/redis/paperless:/data"
    restart: unless-stopped
  ###
  - service_name: mealie
    active: true
    image: ghcr.io/mealie-recipes/mealie:latest
    labels:
      - "traefik.http.routers.mealie.rule=Host(`mealie.{{ secret_domain_full }}`)"
    volumes:
      - "{{ appdata_path }}/mealie:/app/data"
    environment:
      - "BASE_URL=https://mealie.{{ secret_domain_full }}"
      - ALLOW_SIGNUP=false
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: freshrss
    active: true
    image: lscr.io/linuxserver/freshrss:latest
    labels:
      - "traefik.http.routers.freshrss.rule=Host(`rss.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/freshrss:/config"
    include_global_env_vars: true #optional - defaults to false
    restart: unless-stopped
  ###
  - service_name: wallabag
    active: true
    image: wallabag/wallabag
    labels:
      - "traefik.http.routers.wallabag.rule=Host(`wallabag.p.{{ local_domain }}`)"
    environment:
      - "SYMFONY__ENV__DOMAIN_NAME=https://wallabag.p.{{ local_domain }}"
      - "SYMFONY__ENV__DATABASE_DRIVER=pdo_sqlite"
      - "SYMFONY__ENV__FOSUSER_CONFIRMATION=false"
    volumes:
      - "{{ appdata_path }}/wallabag:/var/www/wallabag/data"
    include_global_env_vars: false #optional - defaults to false
    restart: unless-stopped
  ###
  - service_name: searxng
    active: true
    image: searxng/searxng
    labels:
      - "traefik.http.routers.searxng.rule=Host(`search.p.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/searxng:/etc/searxng"
    restart: unless-stopped
  ### Monitoring
  ###
  - service_name: smokeping
    active: true
    image: lscr.io/linuxserver/smokeping
    labels:
      - "traefik.http.routers.smokeping.rule=Host(`smokeping.p.{{ local_domain }}`)"
    ports:
      - "81:80"
    volumes:
      - "{{ appdata_path }}/smokeping/config:/config"
      - "{{ appdata_path }}/smokeping/data:/data"
    include_global_env_vars: true 
    restart: unless-stopped
  ###
  - service_name: netboot
    active: true
    image: lscr.io/linuxserver/netbootxyz
    labels:
      - traefik.enable=false
    ports:
      - "3000:3000"
      - "69:69/udp"
      - "3001:80"
    volumes:
      - "{{ data_path }}/Proxmox/template/iso:/assets"
    include_global_env_vars: true 
    restart: unless-stopped
  ###

# template for docker-compose services
  # - service_name:
  #   active: true
  #   image:
  #   container_name: #optional - only required if diff to service_name
  #   depends_on:
  #     -
  #   labels:
  #     - traefik.enable=true
  #     - "traefik.http.routers.XXXX.rule=Host(`XXXX.{{ secret_domain_full }}`)"
  #     #- traefik.http.routers.XXXX.entrypoints=websecure
  #     #- traefik.http.routers.XXXX.tls.certresolver=cloudflare
  #     - traefik.http.services.XXXX.loadbalancer.server.port=80
  #   ports:
  #     -
  #   volumes:
  #     - "{{ appdata_path }}/app:/config"
  #   environment:
  #     -
  #   #include_global_env_vars: true #optional - defaults to false
  #   restart: unless-stopped
  ###